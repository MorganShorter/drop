#!/bin/bash
#
# configure a stock Fedora to serve as a front-end web reverse proxy.

set -x
set -e

appname=""
rootDir=/var/www

# Install necessary public packages to bootstrap configuration
/usr/bin/dnf -y install awscli make python-virtualenv

# Download and install packages that require authentication credentials
/usr/bin/aws s3 cp s3://{{deployutils_bucket}}/identities/ami-web.ec2.internal / --recursive

[ $(/usr/bin/getent group djaoapp) ] || /usr/sbin/groupadd --gid 1001 djaoapp
[ $(/usr/bin/getent passwd djaoapp) ] || /usr/sbin/useradd --no-create-home --uid 1001 --gid 1001 djaoapp

cd $rootDir
packages=$(ls *.tar.bz2)
if [ "X$packages" != "X" ] ; then
    for package in ${packages} ; do
        /usr/bin/tar jxf $package
    done
    for dirname in $(find . -mindepth 1 -maxdepth 1 -type d | sed -e "s|^\./||") ; do
        appname="$dirname"
        siteTop="$rootDir/$appname"
        virtualenv -p python3 --system-site-packages ${siteTop}
        echo "installTop=$siteTop" > $dirname/dws.mk
        echo "srcTop=$siteTop/reps" >> $dirname/dws.mk
        echo "remoteIndex=$siteTop/./reps/djaoapp.git/djaoapp.xml" >> $dirname/dws.mk
        pushd $siteTop/reps/drop
        make install
        cd $siteTop/reps/$dirname
        ../../bin/dws --default make recurse
        ../../bin/dws --default make install
        popd
        /usr/bin/chown -R djaoapp:djaoapp "$dirname"
    done
fi

# Install and configure publicly available packages
if [ "X$appname" == "X" ] ; then
    siteTop="$rootDir"
    mkdir -p ${siteTop}/reps
    virtualenv -p python3 --system-site-packages ${siteTop}
    git clone {{remote_drop_repo}} ${siteTop}/reps/drop
fi
cd $siteTop
bin/python reps/drop/src/dservices.py -DetcDir=/etc -DldapHost=dbs.{{tag_prefix}}ec2.internal -DcompanyDomain={{domain_name}} -DwwwDomainName={{www_domain_name}} reps/drop/share/profiles/webfront.xml


# Ansible will be waiting for this server to respond
# before it continues with registering the AMI.
echo "DONE" > index.html
#/usr/bin/python3 -m http.server 80
