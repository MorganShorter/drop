#!/bin/bash
#
# configure a stock CentOS or Fedora to serve as a session manager proxy.

set -x
set -e

rootDir=/var/www
VIRTUALENV_RUN="virtualenv --system-site-packages"

# Install necessary public packages to bootstrap configuration
if [ -f /usr/bin/dnf ]; then
    /usr/bin/dnf -y install awscli make python-virtualenv
    VIRTUALENV_RUN="virtualenv -p python3 --system-site-packages"
else
    /usr/bin/yum -y install awscli bzip2 make python-virtualenv
fi

# Download and install packages that require authentication credentials
/usr/bin/aws s3 cp s3://{{deployutils_bucket}}/identities/ami-web.ec2.internal / --recursive

[ $(/usr/bin/getent group djaoapp) ] || /usr/sbin/groupadd --gid 1001 djaoapp
[ $(/usr/bin/getent passwd djaoapp) ] || /usr/sbin/useradd --no-create-home --uid 1001 --gid 1001 djaoapp

cd $rootDir
packages=$(ls *.tar.gz *.tar.bz2)
if [ "X$packages" != "X" ] ; then
    for package in ${packages} ; do
        [ $package =~ *.tar.gz ] || /usr/bin/tar zxf $package
        [ $package =~ *.tar.bz2 ] || /usr/bin/tar jxf $package
    done
    for dirname in $(find . -mindepth 1 -maxdepth 1 -type d | sed -e "s|^\./||") ; do
        siteTop="$rootDir/$dirname"
        $VIRTUALENV_RUN ${siteTop}
        echo "installTop=$siteTop" > $dirname/dws.mk
        echo "srcTop=$siteTop/reps" >> $dirname/dws.mk
        echo "remoteIndex=$siteTop/./reps/djaoapp.git/djaoapp.xml" >> $dirname/dws.mk
        pushd $siteTop/reps/drop
        make install
        cd $siteTop/reps/$dirname
        ../../bin/dws --default make recurse
        ../../bin/dws --default make install
        popd
        /usr/bin/chown -R djaoapp:djaoapp "$dirname"
    done
else
    # defaults to downloading drop so we can install the webfront.xml profile.
    siteTop="$rootDir"
    mkdir -p ${siteTop}/reps
    $VIRTUALENV_RUN ${siteTop}
    git clone {{remote_drop_repo}} ${siteTop}/reps/drop
fi

cd $siteTop
bin/python reps/drop/src/dservices.py -DetcDir=/etc -DldapHost=dbs.{{tag_prefix}}ec2.internal -DcompanyDomain={{company_domain}} -DwwwDomainName={{www_domain_name}} reps/drop/share/profiles/webfront.xml


# Ansible will be waiting for this server to respond
# before it continues with registering the AMI.
echo "DONE" > index.html
#/usr/bin/python3 -m http.server 80
