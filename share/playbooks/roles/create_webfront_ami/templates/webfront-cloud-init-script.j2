#!/bin/bash
#
# configure a stock CentOS or Fedora to serve as a session manager proxy.

set -x
set -e

rootDir=/var/www
VIRTUALENV_RUN="virtualenv --system-site-packages"

# Install necessary public packages to bootstrap configuration
if [ -f /usr/bin/dnf ]; then
    /usr/bin/dnf -y install awscli make python-virtualenv
    VIRTUALENV_RUN="virtualenv -p python3 --system-site-packages"
else
    /usr/bin/yum -y install awscli bzip2 make python-virtualenv
fi

# Download and install packages that require authentication credentials
/usr/bin/aws s3 cp s3://{{deployutils_bucket}}/identities/ami-web.ec2.internal / --recursive

[ $(/usr/bin/getent group djaoapp) ] || /usr/sbin/groupadd --gid 1001 djaoapp
[ $(/usr/bin/getent passwd djaoapp) ] || /usr/sbin/useradd --no-create-home --uid 1001 --gid 1001 djaoapp

cd $rootDir
shopt -s nullglob
packages=$(echo "*.tar.gz *.tar.bz2")
if [ "X$packages" != "X" ] ; then
    for package in ${packages} ; do
        dirname=${package%%.*}
        siteTop="$rootDir/$dirname"
        [[ $package == *.tar.gz ]] && /usr/bin/tar zxf $package
        [[ $package == *.tar.bz2 ]] && /usr/bin/tar jxf $package
        $VIRTUALENV_RUN ${siteTop}
        echo "installTop=$siteTop" > $dirname/dws.mk
        echo "srcTop=$siteTop/reps" >> $dirname/dws.mk
        echo "remoteIndex=$siteTop/./reps/djaoapp.git/djaoapp.xml" >> $dirname/dws.mk
        pushd $siteTop/reps/drop
        make install
        cd $siteTop/reps/$dirname
        ../../bin/dws --default make recurse
        ../../bin/dws --default make install
        popd
        /usr/bin/chown -R djaoapp:djaoapp "$dirname"
    done
else
    # defaults to downloading drop so we can install the webfront.xml profile.
    siteTop="$rootDir"
    mkdir -p ${siteTop}/reps
    $VIRTUALENV_RUN ${siteTop}
    git clone {{remote_drop_repo}} ${siteTop}/reps/drop
fi

cd $siteTop
bin/python reps/drop/src/dservices.py -DetcDir=/etc -DldapHost=dbs.{{tag_prefix}}ec2.internal -DcompanyDomain={{company_domain}} -DwwwDomainName={{www_domain_name}} reps/drop/share/profiles/webfront.xml

# Extra configuation to start up djagent and djaoapp
siteTop=${rootDir}/djaoapp
if [ -d ${siteTop} ] ; then
    # Install djagent
    cd ${siteTop}/reps/djagent
    ../../bin/dws --default make install
    echo "SETTINGS_LOCATION=" > ${siteTop}/etc/sysconfig/djagent
    echo "SETTINGS_CRYPT_KEY=" >> ${siteTop}/etc/sysconfig/djagent
    echo "QUEUE_URL=" >> ${siteTop}/etc/sysconfig/djagent
    chmod 600 ${siteTop}/etc/sysconfig/djagent
    chown djaoapp:djaoapp ${siteTop}/etc/sysconfig/djagent
    cp ${siteTop}/etc/systemd/system/djagent.service /usr/lib/systemd/system
    ../../bin/dws --default make install-selinux

    # Configure djaoapp
    echo "SETTINGS_LOCATION=" > ${siteTop}/etc/sysconfig/djaoapp
    echo "SETTINGS_CRYPT_KEY=" >> ${siteTop}/etc/sysconfig/djaoapp
    chmod 600 ${siteTop}/etc/sysconfig/djaoapp
    chown djaoapp:djaoapp ${siteTop}/etc/sysconfig/djaoapp
    cp ${siteTop}/etc/systemd/system/djaoapp.service /usr/lib/systemd/system

    # Rewrite nginx config file to avoid redirects loops because no https
    [ ! -f /etc/nginx/conf.d/djaoapp.com.conf ] || rm -f /etc/nginx/conf.d/djaoapp.com.conf
    cp /usr/share/nginx/html/404.html /usr/share/nginx/html/50x.html ${siteTop}/reps/djaoapp/htdocs
    restorecon -rvF  ${siteTop}/reps/djaoapp/htdocs
    cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf~
    head -n 37 /etc/nginx/nginx.conf~ > /etc/nginx/nginx.conf
    cat << EOF >> /etc/nginx/nginx.conf
    upstream proxy_djaoapp {
        server  127.0.0.1:8000;
    }

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /var/www/djaoapp/reps/djaoapp/htdocs;

        location / {
            try_files \\$uri/index.html \\$uri.html \\$uri @forward_to_djaoapp;
        }

        location @forward_to_djaoapp {
            proxy_pass    http://proxy_djaoapp;
            include       /etc/nginx/proxy_params;
        }
EOF
    tail -42 /etc/nginx/nginx.conf~ >> /etc/nginx/nginx.conf
    /usr/bin/systemctl enable djagent
    /usr/bin/systemctl enable djaoapp
    /usr/bin/systemctl start djagent
    /usr/bin/systemctl start djaoapp
fi


# Ansible will be waiting for this server to respond
# before it continues with registering the AMI.
/usr/bin/systemctl restart nginx
