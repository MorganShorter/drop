# Create an EC2 instance, configure it with the packages required
# to run a databases server and make an AMI out of it.
#
# The databases server will be hosted in a private subnet with no Internet
# connectivity. We configure the databases server and load the initial
# data onto an attached EBS volume here.
# Later on, in the ``createdbsinstances``, the AMI and EBS volume will be
# used to boot the databases server into the private subnet.

# We cannot attach EBS encrypted volumes to all types of instances. As well
# we must wait until the instance is running before attaching an EBS volume.

- name: Create EC2 instance to setup databases
  local_action:
    module: ec2
    key_name: "{{key_name}}"
    group: "{{courtyard}}"
    vpc_subnet_id: "{{web_subnet_id}}"
    instance_profile_name: "{{courtyard}}-profile"
    instance_type: m3.medium
    image: "{{ami_id}}"
    region: "{{aws_region}}"
    zone: "{{aws_zone}}"
    assign_public_ip: yes
    volumes:
      - device_name: /dev/sdf
        volume_type: gp2
        volume_size: 20
        encrypted: yes
        region: "{{aws_region}}"
        zone: "{{aws_zone}}"
    user_data: "{{ lookup('template', '../templates/dbs-cloud-init-script.j2') }}"
    wait: yes
  register: dbs_base

- set_fact:
    dbs_base_device_id: "{{dbs_base.instances[0].id}}"

- lineinfile: "dest=group_vars/dynamic regexp='^dbs_base_device_id:' line='dbs_base_device_id: {{dbs_base.instances[0].id}}'"

- set_fact:
    dbs_volume_id: "{{dbs_base.instances[0].volume_id}}"

- lineinfile: "dest=group_vars/dynamic regexp='^dbs_volume_id:' line='dbs_volume_id: {{dbs_base.instances[0].volume_id}}'"
