---

- name: Find 'castle-gate' security group id
  local_action:
    module: command
      aws --region {{aws_region}} ec2 describe-security-groups --filters Name=group-name,Values='{{tag_prefix}}{{castle_gate_name}}' --query 'SecurityGroups[*].{name:GroupName,id:GroupId}'
  register: castle_gate_sg_cmd

- set_fact: castle_gate_security_groups="{{castle_gate_sg_cmd.stdout | from_json}}"

- debug: msg="{{castle_gate_security_groups[0].id}}"

- name: Create front-end web server EC2 instances
  local_action:
    module: ec2
    group: "{{tag_prefix}}{{castle_gate_name}}"
    vpc_subnet_id: "{{web_subnet_id}}"
    assign_public_ip: yes
    key_name: "{{key_name}}"
    instance_type: "{{instance_type}}"
    instance_profile_name: "{{tag_prefix}}{{castle_gate_name}}-profile"
    image: "{{ami_id}}"
    region: "{{aws_region}}"
    volumes:
      - device_name: /dev/sda1
        device_type: standard
        volume_size: 8
        delete_on_termination: true
    wait: yes
    user_data: "{{ lookup('template', '../templates/castle-gate-cloud-init-script.j2') }}"
    instance_tags:
      prefix: "{{tag_prefix}}archi"
      profile: "web"
    count_tag:
      prefix: "{{tag_prefix}}archi"
      profile: "web"
    exact_count: 1
  register: web_servers

- route53:
    command: create
    zone: "{{tag_prefix}}ec2.internal."
    record: "web.{{tag_prefix}}ec2.internal."
    private_zone: yes
    type: A
    value: "{{web_servers.instances[0].private_ip}}"
    overwrite: yes

- debug: msg="{{web_servers.instances[0]}}"

- lineinfile: "dest=group_vars/dynamic regexp='^domain_name:' line='domain_name: {{web_servers.instances[0].public_dns}}'"

- lineinfile: "dest=group_vars/dynamic regexp='^web_device_id:' line='web_device_id: {{web_servers.instances[0].id}}'"
